{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.0.5\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  var href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref11.pathname,\n    _ref11$search = _ref11.search,\n    search = _ref11$search === void 0 ? \"\" : _ref11$search,\n    _ref11$hash = _ref11.hash,\n    hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n        key = _ref12[0],\n        value = _ref12[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeys.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      var subscriber = this.subscriber;\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        subscriber && subscriber(false);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      subscriber && subscriber(false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      var subscriber = this.subscriber;\n      subscriber && subscriber(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this4 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this4.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this4.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this4.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n          key = _ref13[0],\n          value = _ref13[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nvar validActionMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validActionMethods = new Set(validActionMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validActionMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            location = _extends({}, location, init.history.encodeLocation(location));\n            historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            _context2.next = 10;\n            return startNavigation(historyAction, location, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 14;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 14:\n            if (!isHashChangeOnly(state.location, location)) {\n              _context3.next = 17;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 23;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 34;\n            break;\n          case 23:\n            if (!(opts && opts.submission)) {\n              _context3.next = 34;\n              break;\n            }\n            _context3.next = 26;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 26:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 29;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 29:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation; // Create a GET request for the loaders\n\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 34:\n            _context3.next = 36;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n          case 36:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 42;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 42:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, {\n              matches: matches,\n              loaderData: loaderData,\n              errors: errors\n            });\n          case 44:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (actionMatch.route.action) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 17;\n              break;\n            }\n            _context4.next = 16;\n            return startRedirectNavigation(state, result, opts && opts.replace === true);\n          case 16:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 17:\n            if (!isErrorResult(result)) {\n              _context4.next = 21;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 21:\n            if (!isDeferredResult(result)) {\n              _context4.next = 23;\n              break;\n            }\n            throw new Error(\"defer() is not supported in actions\");\n          case 23:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 24:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = {\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              loadingNavigation = navigation;\n            }\n            _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 7;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches,\n              loaderData: mergeLoaderData(state.loaderData, {}, matches),\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null,\n              actionData: pendingActionData || null\n            });\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 7:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (_ref2) {\n                var _ref14 = _slicedToArray(_ref2, 1),\n                  key = _ref14[0];\n                var fetcher = state.fetchers.get(key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(key, revalidatingFetcher);\n              });\n              updateState(_extends({\n                navigation: loadingNavigation,\n                actionData: pendingActionData || state.actionData || null\n              }, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (_ref3) {\n              var _ref15 = _slicedToArray(_ref3, 1),\n                key = _ref15[0];\n              return fetchControllers.set(key, pendingNavigationController);\n            });\n            _context5.next = 12;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 12:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 18;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            revalidatingFetchers.forEach(function (_ref4) {\n              var _ref16 = _slicedToArray(_ref4, 1),\n                key = _ref16[0];\n              return fetchControllers.delete(key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 24;\n              break;\n            }\n            _context5.next = 23;\n            return startRedirectNavigation(state, redirect, replace);\n          case 23:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 24:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 29:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (match.route.action) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (isDeferredResult(actionResult)) {\n              invariant(false, \"defer() is not supported in actions\");\n            } // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission);\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n            // No need to send through errors since we short circuit above\n            fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (_ref5) {\n              var _ref17 = _slicedToArray(_ref5, 1),\n                staleKey = _ref17[0];\n              return staleKey !== key;\n            }).forEach(function (_ref6) {\n              var _ref18 = _slicedToArray(_ref6, 1),\n                staleKey = _ref18[0];\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              fetchControllers.set(staleKey, abortController);\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            _context6.next = 43;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 43:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 49;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 49:\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (_ref7) {\n              var _ref19 = _slicedToArray(_ref7, 1),\n                staleKey = _ref19[0];\n              return fetchControllers.delete(staleKey);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 55;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 55:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 60:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = {\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              data: existingFetcher && existingFetcher.data\n            };\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 24;\n              break;\n            }\n            _context7.next = 23;\n            return startRedirectNavigation(state, result);\n          case 23:\n            return _context7.abrupt(\"return\");\n          case 24:\n            if (!isErrorResult(result)) {\n              _context7.next = 29;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 29:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 33:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x31, _x32, _x33) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, replace) {\n      var _window, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location);\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n            if (!(typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n              _context8.next = 8;\n              break;\n            }\n            newOrigin = createClientSideURL(redirect.location).origin;\n            if (!(window.location.origin !== newOrigin)) {\n              _context8.next = 8;\n              break;\n            }\n            if (replace) {\n              window.location.replace(redirect.location);\n            } else {\n              window.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 8:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData; // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && formMethod && isSubmissionMethod(formMethod) && formEncType && formData)) {\n              _context8.next = 16;\n              break;\n            }\n            _context8.next = 14;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: {\n                formMethod: formMethod,\n                formAction: redirect.location,\n                formEncType: formEncType,\n                formData: formData\n              }\n            });\n          case 14:\n            _context8.next = 18;\n            break;\n          case 16:\n            _context8.next = 18;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: formMethod || undefined,\n                formAction: formAction || undefined,\n                formEncType: formEncType || undefined,\n                formData: formData || undefined\n              }\n            });\n          case 18:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x34, _x35, _x36, _x37, _x38) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n              var _ref20 = _slicedToArray(_ref8, 4),\n                href = _ref20[1],\n                match = _ref20[2],\n                fetchMatches = _ref20[3];\n              return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n              var _ref21 = _slicedToArray(_ref9, 3),\n                match = _ref21[2];\n              return match;\n            }), fetcherResults, request.signal, true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n          key = _step3$value[0],\n          id = _step3$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x39, _x40) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp) {\n      var _ref22, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref22 = _temp === void 0 ? {} : _temp, requestContext = _ref22.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {}\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error3 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error3),\n              statusCode: _error3.status,\n              loaderHeaders: {},\n              actionHeaders: {}\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x41, _x42) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp2) {\n      var _ref23, routeId, requestContext, url, method, location, matches, match, result, error, routeData;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref23 = _temp2 === void 0 ? {} : _temp2, routeId = _ref23.routeId, requestContext = _ref23.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            // Pick off the right state value to return\n            routeData = [result.actionData, result.loaderData].find(function (v) {\n              return v;\n            });\n            return _context11.abrupt(\"return\", Object.values(routeData || {})[0]);\n          case 28:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x43, _x44, _x45, _x46, _x47) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isSubmissionMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x48, _x49, _x50, _x51, _x52) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (actionMatch.route.action) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 17;\n              break;\n            }\n            throw new Error(\"defer() is not supported in actions\");\n          case 17:\n            if (!isRouteRequest) {\n              _context14.next = 21;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            throw result.error;\n          case 20:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {}\n            });\n          case 21:\n            if (!isErrorResult(result)) {\n              _context14.next = 27;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 25;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 25:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 27:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              signal: request.signal\n            });\n            _context14.next = 30;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 30:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 32:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x53, _x54, _x55, _x56, _x57) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, context;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              loaderData: {},\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {}\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Can't do anything with these without the Remix side of things, so just\n            // cancel them for now\n\n            results.forEach(function (result) {\n              if (isDeferredResult(result)) {\n                result.deferredData.cancel();\n              }\n            }); // Process and commit output from loaders\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches\n            }));\n          case 16:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: getInternalRouterError(400)\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n    // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref26 = _slicedToArray(_ref10, 3),\n      href = _ref26[0],\n      match = _ref26[1],\n      fetchMatches = _ref26[2];\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createClientSideURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createClientSideURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x58, _x59, _x60, _x61, _x62, _x63, _x64, _x65) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, isAbsolute, activeMatches, routePathnames, resolvedLocation, path, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (basename === void 0) {\n            basename = \"/\";\n          }\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n\n          // Setup a promise we can race against so that abort signals short circuit\n          abortPromise = new Promise(function (_, r) {\n            return reject = r;\n          });\n          onReject = function onReject() {\n            return reject();\n          };\n          request.signal.addEventListener(\"abort\", onReject);\n          _context16.prev = 6;\n          handler = match.route[type];\n          invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n          _context16.next = 11;\n          return Promise.race([handler({\n            request: request,\n            params: match.params,\n            context: requestContext\n          }), abortPromise]);\n        case 11:\n          result = _context16.sent;\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context16.next = 19;\n          break;\n        case 15:\n          _context16.prev = 15;\n          _context16.t0 = _context16[\"catch\"](6);\n          resultType = ResultType.error;\n          result = _context16.t0;\n        case 19:\n          _context16.prev = 19;\n          request.signal.removeEventListener(\"abort\", onReject);\n          return _context16.finish(19);\n        case 22:\n          if (!isResponse(result)) {\n            _context16.next = 48;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context16.next = 33;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n          isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n          if (!isAbsolute) {\n            activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n            routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n              return match.pathnameBase;\n            });\n            resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n            invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n            if (basename) {\n              path = resolvedLocation.pathname;\n              resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n            }\n            location = createPath(resolvedLocation);\n          } // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context16.next = 32;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 32:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 33:\n          if (!isRouteRequest) {\n            _context16.next = 35;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 35:\n          contentType = result.headers.get(\"Content-Type\");\n          if (!(contentType && contentType.startsWith(\"application/json\"))) {\n            _context16.next = 42;\n            break;\n          }\n          _context16.next = 39;\n          return result.json();\n        case 39:\n          data = _context16.sent;\n          _context16.next = 45;\n          break;\n        case 42:\n          _context16.next = 44;\n          return result.text();\n        case 44:\n          data = _context16.sent;\n        case 45:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 47;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 47:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 48:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 50;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 50:\n          if (!(result instanceof DeferredData)) {\n            _context16.next = 52;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result\n          });\n        case 52:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 53:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(location, signal, submission) {\n  var url = createClientSideURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n        key = _step4$value[0],\n        value = _step4$value[1];\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n      key = _revalidatingFetchers[0],\n      match = _revalidatingFetchers[2];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(function (match) {\n    var id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp3) {\n  var _ref27 = _temp3 === void 0 ? {} : _temp3,\n    pathname = _ref27.pathname,\n    routeId = _ref27.routeId,\n    method = _ref27.method;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isSubmissionMethod(method) {\n  return validActionMethods.has(method);\n}\nfunction resolveDeferredResults(_x66, _x67, _x68, _x69, _x70, _x71) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader;\n            return _regeneratorRuntime().wrap(function _loop$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index];\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context17.next = 7;\n                    break;\n                  }\n                  _context17.next = 7;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 7:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          index++;\n          _context18.next = 2;\n          break;\n        case 7:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x72, _x73, _x74) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context19.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context19.sent;\n          if (!aborted) {\n            _context19.next = 6;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context19.next = 14;\n            break;\n          }\n          _context19.prev = 7;\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context19.prev = 11;\n          _context19.t0 = _context19[\"catch\"](7);\n          return _context19.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context19.t0\n          });\n        case 14:\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","warning","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","createClientSideURL","origin","URL","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","concat","_toConsumableArray","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","_compilePath","compilePath","_compilePath2","_slicedToArray","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref11","toPathname","_ref11$search","_ref11$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","DeferredData","_this","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref12","_defineProperty","trackPromise","_this2","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","_this3","abort","v","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this4","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","resolveData","_x","size","_ref2","_ref13","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","opts","_normalizeNavigateOpt2","submission","_callee2$","_context2","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_startNavigation","_callee3","loadingNavigation","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_callee3$","_context3","saveScrollPosition","cancelActiveDeferreds","isHashChangeOnly","createClientSideRequest","findNearestBoundary","handleAction","pendingActionError","Request","handleLoaders","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","result","actionMatch","boundaryMatch","_callee4$","_context4","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_handleLoaders","_callee5","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_yield$callLoadersAnd","results","loaderResults","fetcherResults","_processLoaderData","didAbortFetchLoads","_callee5$","_context5","getMatchesToLoad","_ref14","fetcher","revalidatingFetcher","_ref3","_ref15","callLoadersAndMaybeResolveData","_ref4","_ref16","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","_normalizeNavigateOpt","handleFetcherAction","handleFetcherLoader","_x20","_x21","_x22","_x23","_x24","_x25","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_callee6$","_context6","_ref5","_ref17","staleKey","_ref6","_ref18","_ref7","_ref19","_x26","_x27","_x28","_x29","_x30","_handleFetcherLoader","_callee7","_callee7$","_context7","resolveDeferredData","t0","_x31","_x32","_x33","_startRedirectNavigation","_callee8","_window","redirectLocation","newOrigin","redirectHistoryAction","_state$navigation","_callee8$","_context8","isSubmissionMethod","_x34","_x35","_x36","_x37","_x38","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_callee9$","_context9","all","_ref8","_ref20","fetchMatches","resolveDeferredResults","_ref9","_ref21","_cancelledDeferredRou","markFetchersDone","keys","_iterator","_createForOfIteratorHelper","_step","err","f","doneKeys","_iterator2","_step2","landedId","yeetedKeys","_iterator3","_step3","_step3$value","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","_x39","_x40","_query","_callee10","_temp","_ref22","requestContext","_getShortCircuitMatch3","methodNotAllowedMatches","_error3","_getShortCircuitMatch4","_route2","_callee10$","_context10","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_x41","_x42","_queryRoute","_callee11","_temp2","_ref23","routeData","_callee11$","_context11","find","values","_x43","_x44","_x45","_x46","_x47","_queryImpl","_callee12","routeMatch","_result","_callee12$","_context12","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","_x48","_x49","_x50","_x51","_x52","_submit","_callee13","isRouteRequest","_context13","loaderRequest","context","_callee13$","_context14","Location","_x53","_x54","_x55","_x56","_x57","_loadRouteData","_callee14","_callee14$","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","_ref26","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","_x58","_x59","_x60","_x61","_x62","_x63","_x64","_x65","_callLoaderOrAction","_callee15","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","_callee15$","_context16","finish","text","deferred","toUpperCase","body","URLSearchParams","_iterator4","_step4","_step4$value","foundError","_processRouteLoaderDa","_revalidatingFetchers","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_temp3","_ref27","errorMessage","obj","_x66","_x67","_x68","_x69","_x70","_x71","_resolveDeferredResults","_callee16","_loop","_callee16$","_context18","isRevalidatingLoader","_loop$","_context17","delegateYield","_x72","_x73","_x74","_resolveDeferredData","_callee17","unwrap","_callee17$","_context19","unwrappedData","getAll","handle","pathMatches"],"sources":["/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@remix-run/router/history.ts","/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@remix-run/router/utils.ts","/Users/uilab-m5-03-2020/Desktop/sumin/react-for-beginners/docs/cultural-event-info/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, { signal: request.signal });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}